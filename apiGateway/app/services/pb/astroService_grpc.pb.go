// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: astroService.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AstrologyService_GetPrediction_FullMethodName = "/protobuf.AstrologyService/GetPrediction"
)

// AstrologyServiceClient is the client API for AstrologyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AstrologyServiceClient interface {
	GetPrediction(ctx context.Context, in *PredictionRequest, opts ...grpc.CallOption) (*PredictionResponse, error)
}

type astrologyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAstrologyServiceClient(cc grpc.ClientConnInterface) AstrologyServiceClient {
	return &astrologyServiceClient{cc}
}

func (c *astrologyServiceClient) GetPrediction(ctx context.Context, in *PredictionRequest, opts ...grpc.CallOption) (*PredictionResponse, error) {
	out := new(PredictionResponse)
	err := c.cc.Invoke(ctx, AstrologyService_GetPrediction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AstrologyServiceServer is the server API for AstrologyService service.
// All implementations must embed UnimplementedAstrologyServiceServer
// for forward compatibility
type AstrologyServiceServer interface {
	GetPrediction(context.Context, *PredictionRequest) (*PredictionResponse, error)
	mustEmbedUnimplementedAstrologyServiceServer()
}

// UnimplementedAstrologyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAstrologyServiceServer struct {
}

func (UnimplementedAstrologyServiceServer) GetPrediction(context.Context, *PredictionRequest) (*PredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrediction not implemented")
}
func (UnimplementedAstrologyServiceServer) mustEmbedUnimplementedAstrologyServiceServer() {}

// UnsafeAstrologyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AstrologyServiceServer will
// result in compilation errors.
type UnsafeAstrologyServiceServer interface {
	mustEmbedUnimplementedAstrologyServiceServer()
}

func RegisterAstrologyServiceServer(s grpc.ServiceRegistrar, srv AstrologyServiceServer) {
	s.RegisterService(&AstrologyService_ServiceDesc, srv)
}

func _AstrologyService_GetPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AstrologyServiceServer).GetPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AstrologyService_GetPrediction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AstrologyServiceServer).GetPrediction(ctx, req.(*PredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AstrologyService_ServiceDesc is the grpc.ServiceDesc for AstrologyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AstrologyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.AstrologyService",
	HandlerType: (*AstrologyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrediction",
			Handler:    _AstrologyService_GetPrediction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "astroService.proto",
}
