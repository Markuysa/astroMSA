// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: astroServices.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	SendDailyPredictions(ctx context.Context, in *DailyPredictionsRequest, opts ...grpc.CallOption) (*DailyPredictionsResponse, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) SendDailyPredictions(ctx context.Context, in *DailyPredictionsRequest, opts ...grpc.CallOption) (*DailyPredictionsResponse, error) {
	out := new(DailyPredictionsResponse)
	err := c.cc.Invoke(ctx, "/protobuf.MessageService/SendDailyPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	SendDailyPredictions(context.Context, *DailyPredictionsRequest) (*DailyPredictionsResponse, error)
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) SendDailyPredictions(context.Context, *DailyPredictionsRequest) (*DailyPredictionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDailyPredictions not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_SendDailyPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SendDailyPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MessageService/SendDailyPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SendDailyPredictions(ctx, req.(*DailyPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendDailyPredictions",
			Handler:    _MessageService_SendDailyPredictions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "astroServices.proto",
}

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	GetUsersWithAllowedNotifications(ctx context.Context, in *NotificationsRequest, opts ...grpc.CallOption) (*NotificationResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/protobuf.AuthService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, "/protobuf.AuthService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUsersWithAllowedNotifications(ctx context.Context, in *NotificationsRequest, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/protobuf.AuthService/GetUsersWithAllowedNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error)
	GetUsersWithAllowedNotifications(context.Context, *NotificationsRequest) (*NotificationResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuthServiceServer) AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedAuthServiceServer) GetUsersWithAllowedNotifications(context.Context, *NotificationsRequest) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersWithAllowedNotifications not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.AuthService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.AuthService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUsersWithAllowedNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUsersWithAllowedNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.AuthService/GetUsersWithAllowedNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUsersWithAllowedNotifications(ctx, req.(*NotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _AuthService_GetUser_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _AuthService_AddUser_Handler,
		},
		{
			MethodName: "GetUsersWithAllowedNotifications",
			Handler:    _AuthService_GetUsersWithAllowedNotifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "astroServices.proto",
}

// AstrologyServiceClient is the client API for AstrologyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AstrologyServiceClient interface {
	GetPrediction(ctx context.Context, in *PredictionRequest, opts ...grpc.CallOption) (*PredictionResponse, error)
	SendPredictions(ctx context.Context, in *SendPredictionsRequest, opts ...grpc.CallOption) (*SendPredictionsResponse, error)
}

type astrologyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAstrologyServiceClient(cc grpc.ClientConnInterface) AstrologyServiceClient {
	return &astrologyServiceClient{cc}
}

func (c *astrologyServiceClient) GetPrediction(ctx context.Context, in *PredictionRequest, opts ...grpc.CallOption) (*PredictionResponse, error) {
	out := new(PredictionResponse)
	err := c.cc.Invoke(ctx, "/protobuf.AstrologyService/GetPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *astrologyServiceClient) SendPredictions(ctx context.Context, in *SendPredictionsRequest, opts ...grpc.CallOption) (*SendPredictionsResponse, error) {
	out := new(SendPredictionsResponse)
	err := c.cc.Invoke(ctx, "/protobuf.AstrologyService/SendPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AstrologyServiceServer is the server API for AstrologyService service.
// All implementations must embed UnimplementedAstrologyServiceServer
// for forward compatibility
type AstrologyServiceServer interface {
	GetPrediction(context.Context, *PredictionRequest) (*PredictionResponse, error)
	SendPredictions(context.Context, *SendPredictionsRequest) (*SendPredictionsResponse, error)
	mustEmbedUnimplementedAstrologyServiceServer()
}

// UnimplementedAstrologyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAstrologyServiceServer struct {
}

func (UnimplementedAstrologyServiceServer) GetPrediction(context.Context, *PredictionRequest) (*PredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrediction not implemented")
}
func (UnimplementedAstrologyServiceServer) SendPredictions(context.Context, *SendPredictionsRequest) (*SendPredictionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPredictions not implemented")
}
func (UnimplementedAstrologyServiceServer) mustEmbedUnimplementedAstrologyServiceServer() {}

// UnsafeAstrologyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AstrologyServiceServer will
// result in compilation errors.
type UnsafeAstrologyServiceServer interface {
	mustEmbedUnimplementedAstrologyServiceServer()
}

func RegisterAstrologyServiceServer(s grpc.ServiceRegistrar, srv AstrologyServiceServer) {
	s.RegisterService(&AstrologyService_ServiceDesc, srv)
}

func _AstrologyService_GetPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AstrologyServiceServer).GetPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.AstrologyService/GetPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AstrologyServiceServer).GetPrediction(ctx, req.(*PredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AstrologyService_SendPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AstrologyServiceServer).SendPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.AstrologyService/SendPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AstrologyServiceServer).SendPredictions(ctx, req.(*SendPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AstrologyService_ServiceDesc is the grpc.ServiceDesc for AstrologyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AstrologyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.AstrologyService",
	HandlerType: (*AstrologyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrediction",
			Handler:    _AstrologyService_GetPrediction_Handler,
		},
		{
			MethodName: "SendPredictions",
			Handler:    _AstrologyService_SendPredictions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "astroServices.proto",
}
